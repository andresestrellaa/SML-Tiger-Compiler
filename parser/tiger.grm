structure A = Absyn

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | UMINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp of A.exp | program | lvalue of A.var | exptail | funarg | funargtail 
        | decs | dec | tydec | ty | tyfields | vardec | fundec | fundectail
        | letbody | recordbody | recordtail | nontydec | nonfundec

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%nonassoc ASSIGN
%nonassoc ID
%nonassoc WHILE DO
%right THEN
%right ELSE
%nonassoc LBRACK RBRACK OF
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
    DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%verbose

%%

program : exp ()

exp: lvalue                                     (A.VarExp(lvalue))
   | NIL                                        ()
   | LPAREN exp SEMICOLON exp exptail RPAREN    ()
   | LPAREN RPAREN                              ()
   | LET decs IN letbody END                    ()
   | INT                                        (A.IntExp(INT))
   | STRING                                     (A.StringExp(STRING, STRINGleft))
   | ID LPAREN funarg RPAREN                    ()
   | MINUS exp %prec UMINUS                     (0 - exp)
   | exp PLUS exp                               (A.OpExp({left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left}))
   | exp MINUS exp                              (A.OpExp({left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left}))
   | exp TIMES exp                              (A.OpExp({left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left}))
   | exp DIVIDE exp                             (A.OpExp({left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left}))
   | exp EQ exp                                 (A.OpExp({left=exp1, oper=A.EqOp, right=exp2, pos=exp1left}))
   | exp NEQ exp                                (A.OpExp({left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left}))
   | exp LT exp                                 (A.OpExp({left=exp1, oper=A.LtOp, right=exp2, pos=exp1left}))
   | exp LE exp                                 (A.OpExp({left=exp1, oper=A.LeOp, right=exp2, pos=exp1left}))
   | exp GT exp                                 (A.OpExp({left=exp1, oper=A.GtOp, right=exp2, pos=exp1left}))
   | exp GE exp                                 (A.OpExp({left=exp1, oper=A.GeOp, right=exp2, pos=exp1left}))
   | exp AND exp                                (if exp1 then exp2 else 0)
   | exp OR exp                                 (if exp1 then 1 else exp2)
   | lvalue ASSIGN exp                          (A.AssignExp({var=lvalue, exp=exp, pos=lvalueleft}))
   | ID LBRACE recordbody RBRACE                ()
   | ID LBRACK exp RBRACK OF exp                ()
   | IF exp THEN exp ELSE exp                   ()
   | IF exp THEN exp                            ()
   | WHILE exp DO exp                           (A.WhileExp({test=exp1, body=exp2, pos=WHILEleft}))
   | FOR ID ASSIGN exp TO exp DO exp            ()
   | BREAK                                      (A.BreakExp(BREAKleft))
   | LPAREN exp RPAREN                          ()

recordbody : ID EQ exp recordtail ()
           | ()

recordtail : COMMA exp recordtail ()
           | ()

letbody : exp exptail()
        | ()

decs : tydec nontydec ()
     | vardec decs ()
     | fundec nonfundec ()
     | ()

nontydec : vardec decs ()
         | fundec nonfundec ()
         | ()

nonfundec : vardec decs ()
          | tydec nontydec ()
          | ()

tydec : TYPE ID EQ ty ()
      | TYPE ID EQ ty tydec ()

ty : ID ()
   | LBRACE tyfields RBRACE ()
   | ARRAY OF ID ()

tyfields : ()
         | tyfields COMMA ID COLON ID ()
         | ID COLON ID ()

vardec : VAR ID ASSIGN exp ()
       | VAR ID COLON ID ASSIGN exp ()

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp ()
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ()
       | FUNCTION ID LPAREN tyfields RPAREN EQ exp fundec ()
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp fundec ()

funarg : ()
       | exp funargtail ()

funargtail : COMMA exp funargtail ()
           | ()

exptail : SEMICOLON exp exptail ()
        |  ()

lvalue : ID (A.SimpleVar(Symbol.symbol ID, IDleft))
       | lvalue DOT ID (A.FieldVar(lvalue, Symbol.symbol ID, lvalueleft))
       | ID LBRACK exp RBRACK (A.SubscriptVar(A.SimpleVar(Symbol.symbol ID, IDleft), exp, IDleft))
       | lvalue LBRACK exp RBRACK (A.SubscriptVar(lvalue, exp, lvalueleft))
